import math

def print_board(board): for row in board: print(" | ".join(row)) print("-" * 9)

def is_winner(board, player): for i in range(3): if all(board[i][j] == player for j in range(3)) or all(board[j][i] == player for j in range(3)): return True if all(board[i] [i] == player for i in range(3)) or all(board[i][2 - i] == player for i in range(3)): return True return False

def is_board_full(board): return all(board[i][j] != ' ' for i in range(3) for j in range(3))

def get_empty_cells(board): return [(i, j) for i in range(3) for j in range(3) if board[i][j] == ' ']

def minimax(board, depth, alpha, beta, maximizing_player): if is_winner(board, 'X'): return -1 elif is_winner(board, 'O'): return 1 elif is_board_full(board): return 0

if maximizing_player: 

    max_eval = float('-inf')

    for i, j in get_empty_cells(board):

        board[i][j] = 'O'

        eval = minimax(board, depth + 1, alpha, beta, False) board[i][j] = ' '

        max_eval = max(max_eval, eval)

        alpha = max(alpha, eval)

        if beta <= alpha:

            break

    return max_eval

else:

    min_eval = float('inf')

    for i, j in get_empty_cells(board):

        board[i][j] = 'X'

        eval = minimax(board, depth + 1, alpha, beta, True) board[i][j] = ' '

        min_eval = min(min_eval, eval)

        beta = min(beta, eval)

        if beta <= alpha:

            break

    return min_eval

def get_best_move(board): best_val = float('-inf') best_move = None alpha = float('- inf') beta = float('inf') for i, j in get_empty_cells(board): board[i][j] = 'O' move_val = minimax(board, 0, alpha, beta, False) board[i][j] = ' ' if move_val > best_val: best_val = move_val best_move = (i, j) alpha = max(alpha, best_val) return best_move

def play_game(): board = [[' ' for _ in range(3)] for _ in range(3)] while not is_winner(board, 'X') and not is_winner(board, 'O') and not is_board_full(board): print_board(board) player_move = tuple(map(int, input("Enter your move (row and column): ").split())) if board[player_move[0]][player_move[1]] == ' ': board[player_move[0]][player_move[1]] = 'X' else: print("Invalid move. Try again.") continue

    if is_winner(board, 'X'):  print_board(board)

        print("You win!")

        break

    if is_board_full(board): print_board(board)

        print("It's a tie!") break

print("Computer's move:")

computer_move = get_best_move(board) board[computer_move[0]][computer_move[1]] = 'O'

    if is_winner(board, 'O'):

        print_board(board)

        print("Computer wins!") break

    if is_board_full(board): print_board(board)

        print("It's a tie!") break

if name == "main": play_game()output

