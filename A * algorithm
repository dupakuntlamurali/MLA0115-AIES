import heapq

class Node:
    def __init__(self, position, parent=None):
        self.position = position
        self.parent = parent
        self.g = 0  # Cost from start to this node
        self.h = 0  # Heuristic cost to goal
        self.f = 0  # Total cost

    def __eq__(self, other):
        return self.position == other.position

    def __lt__(self, other):
        return self.f < other.f  # Define less than for heap comparison

def heuristic(a, b):
    # Using Manhattan distance as the heuristic
    return abs(a[0] - b[0]) + abs(a[1] - b[1])

def astar(start, goal, grid):
    open_list = []
    closed_list = set()

    start_node = Node(start)
    goal_node = Node(goal)
    
    heapq.heappush(open_list, start_node)

    while open_list:
        current_node = heapq.heappop(open_list)

        if current_node == goal_node:
            path = []
            while current_node:
                path.append(current_node.position)
                current_node = current_node.parent
            return path[::-1]  # Return reversed path

        closed_list.add(current_node.position)

        # Generate children
        neighbors = [(0, -1), (0, 1), (-1, 0), (1, 0)]  # Up, Down, Left, Right
        for new_position in neighbors:
            node_position = (current_node.position[0] + new_position[0],
                             current_node.position[1] + new_position[1])

            if (node_position[0] < 0 or node_position[0] >= len(grid) or
                node_position[1] < 0 or node_position[1] >= len(grid[0]) or
                grid[node_position[0]][node_position[1]] != 0):
                continue  # Ignore out of bounds or obstacles

            if node_position in closed_list:
                continue  # Ignore already evaluated nodes

            child_node = Node(node_position, current_node)

            # Calculate costs
            child_node.g = current_node.g + 1
            child_node.h = heuristic(child_node.position, goal)
            child_node.f = child_node.g + child_node.h

            # Check if this child node is already in the open list
            if any(child_node == open_node and child_node.g > open_node.g for open_node in open_list):
                continue  # This path is not better

            heapq.heappush(open_list, child_node)

    return None  # No path found

# Example usage
if __name__ == "__main__":
    grid = [
        [0, 0, 0, 0, 0],
        [0, 1, 1, 1, 0],
        [0, 0, 0, 0, 0],
        [0, 1, 1, 1, 0],
        [0, 0, 0, 0, 0]
    ]
    
    start = (0, 0)  # Starting position
    goal = (4, 4)   # Goal position

    path = astar(start, goal, grid)
    print("Path found:", path)
